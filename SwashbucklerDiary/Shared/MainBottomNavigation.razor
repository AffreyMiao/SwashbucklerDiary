@using SwashbucklerDiary.IServices
@using SwashbucklerDiary.Models

<MBottomNavigation Value="Value"
                   ValueChanged="ValueChanged"
                   InputValue="Show"
                   Class="d-flex justify-space-around d-sm-none"
                   Mandatory="true"
                   App="true"
                   Shift="true">
    @foreach (var (item, i) in Items.Select((v, i) => (v, i)))
    {
        <MButton Ripple="false" OnClick="()=>item.Delegate.DynamicInvoke()">
            <span>@(I18n.T(item.Text))</span>
            <MIcon>
                @(Value == i ? item.SelectedIcon : item.Icon)
            </MIcon>
        </MButton>
    }
</MBottomNavigation>

@code {
    [Inject]
    private II18nService I18n { get; set; } = default!;

    [Parameter]
    public StringNumber Value { get; set; } = 0;
    [Parameter]
    public EventCallback<StringNumber> ValueChanged { get; set; }
    [Parameter]
    public bool Show { get; set; }
    [Parameter]
    public List<NavigationButton> Items { get; set; } = new();
}